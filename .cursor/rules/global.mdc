---
description:
globs:
alwaysApply: true
---

# 본 프로젝트에 대한 문제점 분석과 개선점이 필요하다.

## [워크플로우]

- 해당 프로젝트는 hateslop이라는 organizaation에 repository로 되어있다.
- 2인 1조로 5개 조에 과제로 활용하기 위한 템플릿이다.
- 각 조에 A는 해당 레포를 본인의 레포로 fork 한다.
- 같은 조원 B는 A가 fork한 repo 를 로컬로 clone 후 feature 별로 branch 구분 후 pull request를 보낸다.
- 코드리뷰 후 merge 한다.
- 최종 프로젝트는 vercel 을 이용해서 배포한다.

프로젝트 완료 후

- 프로젝트 완료 후 조원 B는 완성된 A의 repo 를 fork 한다. (본인 포폴 정리용)
- fork 는 처음에 해도 된다. sync 만 해주면 됨. 다만, 본인 레포에 fork 했다고 그쪽에 pull request를 하면 안되고, A의 repo 에 Pull request를 진행한다.
- README.md 를 깔끔하게 정리하여 포폴로 정리해둔다.

## 문제점

- 현재 프로젝트는 여러 조의 프로젝트를 모두 하나의 프로젝트로 모으는 모노레포 형태로 되어있는데,
  그럴 필요가 없다. 예를들어 chat1, chat2 등으로 구성되어있다.
  조별로 fork 해서 단일 템플릿 기반으로 개별 자유도를 살린 개성있는 프로젝트가 나올 수 있도록 템플릿 수정이 필요하다. 하나의 템플릿을 각자 배포하는 구조로 변경하기 위해서 어떻게 수정하는 것이 좋은지 판단하라.
- 해당 템플릿의 추가적인 문제점을 파악하라.

## 기술사항

- frontend는 vanilla javascript, html, css 만 사용하여 챗봇 ui를 구현한다.
- vercel 을 이용하여 배포를 진행한다.
- flask 또는 python 기반 server 를 사용한다.
- 추가적인 제안이 가능하다면 제안하라.

# [붙임1] 과제 안내문

3-charchat-project
3기 OpenAI API와 RAG를 활용한 캐릭터 챗봇 프로젝트
팀별 수정사항
주의: 아래에 해당하는 파일과 각 팀 번호에 해당하는 부분이나 폴더만 수정 (불가피한 전체 코드 수정 시 문의)

1. 팀별폴더/chatbot.py - 각 팀별 개인화면 설정
   팀 번호에 맞게 chatbot_data(또는 비슷한 딕셔너리) 내에 이름, ID, 라우트 등을 정확히 수정합니다.

썸네일 이미지 추가(1:1 비율)
static/images/ 아래에 본인의 챗봇 썸네일 이미지를 준비하고, app.py에서 url_for('static', filename='images/...') 부분을 팀 이름/번호에 맞게 변경해 주세요.
챗봇 설명 작성:
약 4~5줄 정도의 문장으로 구성하여, 캐릭터 특징을 잘 드러내고, 어떤 대화를 할 수 있는 챗봇인지 요약합니다.
태그 작성(3~4개 권장):
예: ['#코미디', '#액션', '#반전', '#일상'] 같은 식으로 챗봇 성격을 간단하게 표현할 태그들을 작성합니다. 2. templates/chat.html
비디오 경로 확인 및 추가:
chat.html에서 video 태그의 src 경로를 본인의 팀 챗봇 영상으로 교체합니다.

예: <source src="{{ url_for('static', filename='videos/chatbotX/...') }}" ...>

이미지 경로 확인 및 추가:
백엔드 연동 없이, 정적으로 img src="..." 부분을 하나씩 수정해야 합니다.

갤러리에 보여줄 이미지를 static/images/chatbotX/ 폴더에 넣고, chat.html의 경로를 적절히 바꿔주세요.

3. generation/chatbot@/chatbot@.py
   응답 및 임베딩 비교 코드:
   OpenAI API를 활용한 답변 생성과, 임베딩을 통한 유사도 계산(또는 RAG 등) 로직을 모두 이 파일에 작성합니다.

예: generate_response(user_message) 함수 안에서 임베딩 -> 유사도 검색 -> ChatCompletion 호출 과정을 구현.

OpenAI API Key 사용:
공용으로 쓰는 API 키(또는 팀별 키)를 이곳에서 불러와 설정합니다.

.env 파일이나 환경변수를 통해 안전하게 관리하세요.

4. static/js/chatbot@.js
   JS-파이썬 매핑:
   이 JS 파일은 chat.html에서 동적으로 로드되어, 사용자 메시지를 /api/chat으로 보내고, 서버(파이썬) 응답을 화면에 표시하는 역할을 합니다.

chatbot1.js 참고:

기본 메시지 전송 로직(이벤트 리스너, fetch API, DOM 업데이트)은 chatbot1.js를 예시로 삼으면 됩니다.

단, 현재 예시는 임의의 이미지를 항상 출력하도록 되어 있으니, 팀 챗봇 캐릭터 이미지로 교체하고 싶다면 해당 부분을 수정하세요.

추가적으로, 응답 형태나 포맷이 달라질 경우(예: JSON 구조 변경), 그에 맞게 프런트 처리 로직도 수정해야 합니다.

5. data 폴더 / static 하위 폴더
   임베딩 벡터 / 필요한 데이터 저장:
   각 팀은 data/chatbot@/ 형태로 폴더를 만들어, 여기에 임베딩 결과(json 등)나 기타 필요한 텍스트, 이미지, 스크립트 파일 등을 저장합니다.

chatbot@.py에서 임베딩 데이터를 불러올 때도 이 경로를 맞춰주세요.

6. 추가 패키지 requirements.txt
   임베딩 패키지, 기타 라이브러리:
   예: numpy, pandas, openai, scikit-learn 등등.

새로운 라이브러리를 사용하면, 반드시 requirements.txt에 추가하여 다른 팀원/환경에서도 동일한 버전으로 설치 가능하도록 해주세요.

그 밖에 권장사항
.gitignore: API 키나 민감 파일이 유출되지 않도록 .gitignore 설정도 점검해 주세요.

버전 관리: 각 팀원 간에 충돌이 많지 않도록, pull/push 전후로 branch 관리를 꼼꼼히 해주세요.

UI/UX 개선 건의: 필요하다면 스타일 수정, 대화 구조(봇 이미지를 왼쪽, 유저 메시지를 오른쪽 등)도 팀별로 자유롭게 건의 가능합니다.

Chatbot5
Chatbot5 README
Chatbot6
Chatbot6 README
Chatbot7
Chatbot5 README
Chatbot8
Chatbot5 README
Chatbot9
Chatbot5 README
