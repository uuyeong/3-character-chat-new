---
alwaysApply: true
---

### 🔧 개발 환경 구축을 위한 준비물

개발을 시작하기 전에 다음 3가지를 반드시 준비해야 합니다.

1.  **Docker Desktop 설치:** Docker를 가장 쉽게 사용할 수 있는 공식 애플리케이션입니다. [공식 홈페이지](https://www.docker.com/products/docker-desktop/)에서 자신의 운영체제(Windows, macOS, Linux)에 맞는 버전을 다운로드하여 설치 후, 반드시 실행하여 정상 구동을 확인합니다.

    > 설치를 하고 난 다음에 DockerDesktop 을 로컬에서 실행한 상태에서 진행해야 합니다.

2.  **프로젝트 코드 다운로드:** `README.md`의 설명대로 GitHub에서 프로젝트를 `clone`합니다.

    ```bash
    # YOUR_USERNAME을 자신의 GitHub 아이디로 변경하세요.
    git clone https://github.com/YOUR_USERNAME/chatbot-project.git
    cd chatbot-project
    ```

3.  **OpenAI API 키 설정:** 이 프로젝트는 OpenAI의 AI 모델을 사용하므로 API 키가 필수적입니다.
    - 프로젝트 폴더의 `.env.example` 파일을 복사하여 `.env` 파일을 생성합니다.
    - 생성된 `.env` 파일을 열어 `your_openai_api_key_here` 부분을 자신의 OpenAI API 키로 교체하고 저장합니다. (따옴표는 필요 없습니다.)

---

### ⚙️ Docker 개발 환경의 핵심 파일 이해하기

프로젝트 폴더에는 Docker 환경을 정의하는 `Dockerfile`과 `docker-compose.yml` 파일이 있습니다.

- `Dockerfile`: 컨테이너의 **설계도**입니다. 어떤 OS를 기반으로, 어떤 버전의 Python을 설치하고, 어떤 라이브러리들을 설치할지 등 컨테이너의 내부 구조를 정의합니다.

- `docker-compose.yml`: 컨테이너의 **실행 계획서**입니다. 설계도(`Dockerfile`)를 바탕으로 컨테이너를 어떻게 실행할지 상세 설정을 정의합니다. 여기서 가장 중요한 부분은 `volumes` 설정입니다.

  ```yaml
  # docker-compose.yml 파일의 일부
  volumes:
    # 개발 시 코드 변경사항 실시간 반영
    - ./app.py:/app/app.py
    - ./services:/app/services
    # ... (생략) ...
  ```

  volumes는 내 컴퓨터(호스트)의 폴더와 Docker 컨테이너 안의 폴더를 실시간으로 연결(마운트)하는 기능입니다. 이 설정 덕분에 내 컴퓨터에서 코드를 수정하고 저장하면, 그 내용이 즉시 실행 중인 컨테이너 내부에 반영됩니다.

---

### 🚀 Docker 개발 환경 실행 및 개발 워크플로우

**1단계: Docker 컨테이너 빌드 및 실행**

터미널을 열고, 프로젝트 폴더로 이동한 뒤 다음 명령어를 입력하세요.

```bash
docker compose up --build
```

- `docker compose up`: `docker-compose.yml` 파일의 설정대로 컨테이너를 실행하는 명령어입니다.
- `--build`: 컨테이너를 실행하기 전, `Dockerfile`을 이용해 이미지를 먼저 만들라는(빌드하라는) 옵션입니다. **최초 실행 시에는 반드시 필요합니다.**

**2단계: 애플리케이션 접속**

웹 브라우저를 열고 주소창에 `http://localhost:5001`을 입력하여 접속합니다. `README.md`에 있는 것과 같은 정상 작동 화면이 나타나면 성공입니다.

**3단계: 실시간 코드 수정 및 확인 (핵심 워크플로우)**

이제 본격적인 개발을 시작합니다. Docker 컨테이너는 **계속 켜놓은 상태**로 진행합니다.

1.  평소 사용하던 코드 에디터(VS Code 등)로 프로젝트 폴더를 엽니다.
2.  여러분이 주로 수정해야 할 핵심 파일인 `services/chatbot_service.py`를 수정하고 저장합니다.
3.  파일을 저장하는 순간, 터미널을 확인해 보세요. Flask 서버가 코드 변경을 감지하고 자동으로 재시작되는 로그를 볼 수 있습니다.
4.  웹 브라우저에서 챗봇과 대화하며 변경사항을 즉시 확인할 수 있습니다.

---

### 💡 개발 중 프로젝트 변경사항 관리 가이드 (필독)

개발을 하다 보면 코드를 수정하는 것 외에 파일을 추가하거나 새로운 라이브러리를 설치해야 할 때가 있습니다. 각 상황에 맞는 대처법은 다음과 같습니다.

#### 상황 1: 새로운 파일 또는 폴더를 추가하는 경우

`volumes`에 **이미 연결된 폴더**(`services`, `config`, `static` 등) 안에 새 파일을 추가하는 것은 매우 간단합니다.

- **예시:** `services` 폴더에 `utils.py`를 추가하거나, `static/images/chatbot`에 새 이미지를 추가하는 경우.
- **조치:** **아무것도 할 필요 없습니다.** `volumes`가 폴더 단위로 연결되어 있어, 파일 생성/수정/삭제가 **즉시 자동으로 컨테이너에 반영됩니다.**

하지만 `volumes`에 **연결되지 않은 새로운 최상위 폴더**(예: `helpers`)를 만들고 사용하려면, 컨테이너에 해당 폴더를 알려줘야 합니다.

- **조치:**
  1.  `docker-compose.yml` 파일의 `volumes` 목록에 `- ./helpers:/app/helpers`와 같이 새 폴더 경로를 추가합니다.
  2.  `Ctrl+C`로 컨테이너를 중지한 뒤 `docker compose down`과 `docker compose up` 명령어로 컨테이너를 재시작하여 설정을 적용합니다.

> **팁:** 이 프로젝트 템플릿은 필요한 대부분의 폴더를 미리 연결해두었기 때문에, 여러분은 주로 첫 번째 경우에 해당할 것입니다.

#### 상황 2: 새로운 Python 라이브러리를 추가하는 경우

만약 `requests`나 `pandas` 같은 새로운 외부 라이브러리를 사용해야 한다면, 다음 절차를 따라야 합니다.

1.  **`requirements.txt` 파일 수정:** 프로젝트의 `requirements.txt` 파일을 열어 필요한 라이브러리 이름(예: `requests==2.31.0`)을 추가하고 저장합니다.

2.  **컨테이너 이미지 재빌드 (Rebuild):** 실행 중인 컨테이너는 처음에 만들어질 때의 라이브러리만 가지고 있습니다. `requirements.txt`의 변경사항을 컨테이너에 설치하려면, 컨테이너의 **설계도(`Dockerfile`)**를 다시 실행하여 **이미지를 재빌드**해야 합니다.

    - `Ctrl + C`로 실행 중인 컨테이너를 중지합니다.
    - 터미널에 `--build` 옵션을 붙여 다음 명령어를 실행합니다.

    ```bash
    docker compose up --build
    ```

    이 명령어는 Docker가 `requirements.txt` 파일의 변경을 감지하고 `pip install` 과정을 다시 수행하도록 하여, 새로 추가된 라이브러리를 설치한 뒤 컨테이너를 실행합니다.

| 변경 종류                   | 필요한 조치                                       | 핵심 명령어                   |
| :-------------------------- | :------------------------------------------------ | :---------------------------- |
| **코드 수정**               | 아무것도 필요 없음 (자동 반영)                    | (없음)                        |
| **연결된 폴더에 파일 추가** | 아무것도 필요 없음 (자동 반영)                    | (없음)                        |
| **새 라이브러리 추가**      | `requirements.txt` 수정 후, **이미지 재빌드**     | `docker compose up --build`   |
| **새 최상위 폴더 추가**     | `docker-compose.yml` 수정 후, **컨테이너 재시작** | `docker compose down` 후 `up` |

---

### 📚 알아두면 유용한 Docker 명령어

- **개발 환경 종료:** `docker compose up`을 실행한 터미널에서 `Ctrl + C`를 누릅니다. 컨테이너를 완전히 멈추고 관련 네트워크까지 정리하려면 아래 명령어를 사용하세요.

  ```bash
  docker compose down
  ```

- **개발 환경 재시작:** 다시 개발을 시작할 때는 다음 명령어를 사용합니다. (이미지가 빌드되어 있으므로 `--build`는 생략 가능)
  ```bash
  docker compose up
  ```

추가적인 예외상황이 존재할 수 있지만, 위의 두 가지 경우 (volume에 명시하지 않은 파일 추가, 라이브러리 추가) 가 대부분일 거예요.
